name: Deploy Finance Dashboard

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-frontend:
    name: Build & Deploy Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Set Environment Variables
        run: |
          echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" >> $GITHUB_ENV

      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm install

      - name: Build Next.js App
        run: |
          cd frontend
          npm run build

      - name: Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          cd frontend
          npx vercel --prod --token $VERCEL_TOKEN --yes

  build-backend:
    name: Build & Deploy Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Node.js (For Backend)
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Backend Dependencies
        run: |
          cd backend
          npm install

      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          curl -X POST "https://api.render.com/deploy/srv-xxxxxx?key=$RENDER_API_KEY"

  setup-database:
    name: Configure Supabase
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Check if schema.sql exists
        run: |
          if [ ! -f database/schema.sql ]; then
            echo "Error: database/schema.sql not found!"
            exit 1
          fi

      - name: Initialize Database Schema
        run: |
          curl -X POST "${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}/rest/v1/sql" \
          -H "apikey: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" \
          -H "Content-Type: application/json" \
          --data-binary "@database/schema.sql"

  dockerize:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [build-backend]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: |
          cd backend
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/finance-dashboard:latest .

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/finance-dashboard:latest
